#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>


&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";
        
        default_layer {
            bindings = <
&kp GRAVE &kp N1 &kp N2 &kp N3 &kp N4 &kp N5                     &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp BSPC
&kp TAB &kp Q &kp W &kp E &kp R &kp T                             &kp Y &kp U &kp I &kp O &kp P &kp BSLH
&kp ESC &kp A &kp S &kp D &kp F &kp G                             &kp H &kp J &kp K &kp L &kp SEMI &kp SQT
&kp LSHFT &kp Z &kp X &kp C &kp V &kp B &kp C_MUTE &kp INS        &kp N &kp M &kp COMMA &kp DOT &kp FSLH &kp DEL
&kp LCTRL &kp LALT &kp LGUI &lt 1 SPACE &lt 2 RET &kp HOME &kp PG_DN &kp K_CMENU
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
        
        lower_layer {
            bindings = <
&kp F12 &kp F1 &kp F2 &kp F3 &kp F4 &kp F5                       &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &kp F11
&trans &none &none &none &none &none                             &none &none &none &none &kp LBKT &kp RBKT
&kp CAPS &none &kp K_MY_COMPUTER &none &none &none               &kp LEFT &kp DOWN &kp UP &kp RIGHT &none &none
&trans &none &none &kp LC(C) &kp LC(V) &none &trans &none        &kp K_CMENU &kp K_MAIL &none &none &none &none
&trans &trans &trans &trans &lt 3 INS          &kp END &kp PG_UP &kp K_FIND
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
        
        raise_layer {
            bindings = <
&trans &trans &trans &trans &trans &trans                        &trans &trans &trans &trans &trans &trans
&trans &none &none &none &none &none                             &none &none &none &none &none &none
&trans &none &none &none &none &none                             &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &none &none
&trans &none &none &none &none &none &trans &none                &none &kp C_MUTE &none &none &none &trans
&trans &trans &trans &lt 3 K_EXEC &trans      &trans &trans &trans
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
        
        adjust_layer {
            bindings = <
&none &rgb_ug RGB_EFF &rgb_ug RGB_BRD &rgb_ug RGB_BRI &rgb_ug RGB_SAI &rgb_ug RGB_SAD &rgb_ug RGB_HUI &rgb_ug RGB_HUD &rgb_ug RGB_SPI &rgb_ug RGB_SPD &none &none
&none &none &none &none &rgb_ug RGB_TOG &none                   &none &none &none &none &none &none
&none &none &none &none &none &none                             &rgb_ug RGB_EFR &none &none &rgb_ug RGB_EFF &none &none
&none &none &none &none &none &ext_power EP_TOG &none &none     &none &none &none &none &none &none
&trans &trans &trans &trans &trans            &trans &trans &trans
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
    };
};
